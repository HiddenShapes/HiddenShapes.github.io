import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**3 - x - 1

def f_prime(x):
    return 3*x**2 - 1

def newton_method(f, f_prime, x0, tol=1e-6, max_iter=100):
    x = x0
    for i in range(max_iter):
        fx = f(x)
        fpx = f_prime(x)
        if abs(fx) < tol:
            return x, i
        x = x - fx/fpx
    return None, i

# Define the range of x values to plot
x_vals = np.linspace(-2, 2, 1000)

# Plot the function
fig, ax = plt.subplots()
ax.plot(x_vals, f(x_vals), label="f(x)")

# Define the initial guess and plot it on the graph
x0 = -1
ax.scatter(x0, f(x0), marker="x", color="red", label="Initial guess")

# Perform Newton's method and plot each iteration on the graph
x, num_iters = newton_method(f, f_prime, x0)
for i in range(num_iters):
    ax.scatter(x, f(x), marker="o", color="green", label=f"Iteration {i+1}")
    fx = f(x)
    fpx = f_prime(x)
    x_next = x - fx/fpx
    ax.plot([x, x_next], [fx, 0], color="black", linewidth=1)
    x = x_next

# Plot the final root on the graph
ax.scatter(x, f(x), marker="*", color="blue", label="Root")

# Add labels and legend to the plot
ax.set_xlabel("x")
ax.set_ylabel("f(x)")
ax.set_title("Newton's Method for f(x) = x^3 - x - 1")
ax.legend()

# Show the plot
plt.show()
