---
title: Section 1.4.3
subtitle: La méthode de Newton
format:
  revealjs:
  
    view-distance: 10
    mobile-view-distance: 10
    incremental: true
    progress: false
    controls: true
    template-partials:
      - title-slide.html
    code-summary: "code"
    theme: black
    width: 1200
    height: 720
    transition: none
    css: custom.css
    chalkboard:
        theme: whiteboard
include-before-body: header.html
jupyter: python3
---

## Rappels

<div style="font-size:29px;">
- Nous étudions des méthodes numériques pour estimer un zéro $\bar{x}$ d'une fonction réelle et non linéaire $f$. 

- La dernière fois, nous avons étudié une famille de méthodes en général: les <span style="color: gold;">méthodes de point fixe</span>. Il s'agit de choisir une fonction $g$, telle que 
<div style="margin-top: -30px;">$$f(\bar{x}) = 0 \iff g(\bar{x})=\bar{x}$$</div>
et de chercher un point fixe de $g$. On appelle $g$ la <span style="color: gold;">fonction d’itération</span>.

- On procède par la méthode de Picard: on établit une estimation initiale de $\bar{x}$, notée $x_0$, puis on applique itérativement la fonction $g$ sur cette estimation pour produire les nombres 
$$x_{n+1}:=g(x_{n}).$$
L'espoir est que la suite <span style="color: gold;">$(x_{n}), n \in ℕ$, converge vers $\bar{x}$</span>.
- Aujourd'hui, nous allons étudier un exemple spécifique de méthode de point fixe : la méthode de Newton. Il s'agit d'une méthode puissante car elle peut converger rapidement (comme nous le verrons), mais elle exige aussi que <span style="color: gold;">certaines conditions</span> soient remplies, nous détaillerons ces conditions au fur et à mesure qu'elles se présenteront. Pour le moment, nous supposons seulement que <span style="color: gold;">$f$ est $C^1$</span>.
</div>

## Présentation graphique de la méthode 

<!---
## Points clés sur la méthode de Newton

- Pour estimer un zéro d'une fonction non linéaire 
- Une méthode de _point fixe_ (avec donc une fonction d'itération $g$)
- Convergence _quadratique_ (sous certaines conditions) 
-->

<img src="img/newt-1.svg" class="img-newt">
![](img/newt-1.svg){.absolute top=60 left=267 height="550"}

<div class="fragment">
![](img/newt-2.svg){.absolute top=60 left=267 height="550"}
</div>

<div class="fragment" style="'z-index': -1">
![](img/newt-3.svg){.absolute top=60 left=267 height="550"}
</div>

<div class="fragment">
![](img/newt-4.svg){.absolute top=60 left=267 height="550"}
</div>

<div class="fragment">
![](img/newt-5.svg){.absolute top=60 left=267 height="550"}
</div>

<div class="fragment">
![](img/newt-6.svg){.absolute top=60 left=267 height="550"}
</div>

<div class="fragment">
![](img/newt-7.svg){.absolute top=60 left=267 height="550"}
</div>


<div style="text-align: center;">
<div style="border: 2px solid #dde0eb; border-radius: 10px; text-align: center; display: inline-block; padding-left: 0.8em; padding-right: 0.8em; margin-left: auto; margin-right: auto; font-size: 34px;"> 
$\bar{x}$ — le zéro recherché &nbsp; &nbsp; &nbsp; $x_0$ — l'approximation initiale 
</div>
</center>

## Fonction d'itération 

<section data-auto-animate>
<img src="img/newt-1.svg" style="opacity: 0; height:550px;"> <!--padding ![](img/inter-2.svg){.absolute top=-12 left=267 height="550"}-->
![](img/inter.svg){.absolute top=-12 left=267 height="550" data-id="box"}
</section>

<section data-auto-animate>
<img src="img/newt-1.svg" style="opacity: 0; height:700px;"> <!--padding-->
<img class="fragment fade-out" data-fragment-index="0" data-id="box" src="img/inter-1.svg" style="position: absolute; top:-120px; left:-350px;height:700px;">
<img class="fragment"  data-fragment-index="0" src="img/inter-2.svg" style="position: absolute; top:-120px; left:-350px;height:700px;">
<div class="fragment" style="position: absolute; top:20px; right:150px; font-size: 0.8em;"> Comme la pente $= \frac{\Delta_{y}}{\Delta_{x}}$, nous avons 
$$ f'(x)=\frac{f(x)}{(x-g(x))} $$
<span class="fragment">ce qui, après isolation de $g(x)$, donne
$$ \boxed{g(x) = x - \frac{f(x)}{f'(x)}}. $$</span>
</div>
<div class="fragment">
<div  style="position: absolute; bottom:100px; right:0px; background: #303030; max-width: 60%; color: #dde0eb; border: 2px solid #dde0eb; border-radius: 10px; padding-left: 0.8em; padding-right: 0.8em; font-size: 0.7em; padding-bottom: 0.4em; ">
<b style='font-size: 1.2em;'>Remarque. </b>
<hr style="margin: 0.3em auto;">
Pour isoler $g(x)$ ainsi, il faut que $f'(x)\neq 0$, ce qui nous donne notre première condition sur $f$: qu'<span style="color: gold;">il existe un voisinage de $\bar{x}$ tel que $f'(x)\neq 0$</span>. Le plus souvent, cette condition est remplie en exigeant que $f'(\bar{x}) \neq 0$ (c'est-à-dire que $\bar{x}$ est un zéro _simple_).
</div>
</div>
</section>


## Condition d'arrêt 

<div style="font-size:30px">
Nous avons vu que pour une méthode de point fixe avec une fonction d'itération <span style="color: gold;">$g$ qui est  $C^1$</span>, il existe, $\forall n \in ℕ^*$, $\xi_{n} \in \ ]\bar{x};x_n[$ tel que,

<div style="margin-top: -30px;">$$ \boxed{\bar{x} - x_{n} = \frac{1}{1-g'(\xi_n)}(x_{n+1}-x_n)}.$$</div>

Nous avons conclu alors que $|x_{n+1}-x_n|$ estime bien l'erreur tant que $g'(\xi_n)$ n'est pas proche de 1.

:::{.fragment}
Comme, pour la méthode de Newton, 

<div style="margin-top: -30px;">$$g(x) = x - \frac{f(x)}{f'(x)}$$</div>

une manière de garantir que $g \in C^1$ est de supposer que <span style="color: gold;">$f$ est $C^2$</span>, ce qui donne notre deuxième condition sur $f$. Sous cette condition, nous avons donc que

$$g'(x) = 1 - \frac{f'(x)^2 - f(x)\,f''(x)}{f'(x)^2} \in C^0.$$
:::

:::{.fragment}
Par conséquent, $g'(\bar{x})=0$ et par continuité $g'(x)\approx 0$ dans un voisinage de $\bar{x}$. Nous pouvons donc utiliser en toute sécurité une borne sur $|x_{n+1}-x_n|$ pour définir notre condition d'arrêt. 
:::
</div>

## Résumé sur les conditions

<div style="font-size: 35px">

Pour l'instant nous avons identifié deux conditions pour que la méthode de Newton fonctionne bien.

- <span style="color: gold;">Condition (A)</span> : Il existe un voisinage de $\bar{x}$ tel que $f'(x)\neq 0$
- <span style="color: gold;">Condition (B)</span> : $f$ est $C^2$

<div class="fragment">
<div  class="Theorembox">
<b style='font-size: 1.2em;'>Exercice. </b>
<hr style="margin: 0.3em auto;">
Utiliser les résultats du dernier cours pour montrer que, sous les conditions <span style="color: gold;">(A)</span> et <span style="color: gold;">(B)</span>, la méthode de Newton converge (au moins) linéairement vers une solution pour tout $x_0$ suffisamment proche de $\bar{x}$. 
</div>
</div>

<div class="fragment">
Nous avons également discuté d'une variante légèrement plus forte de la condition <span style="color: gold;">(A)</span>. 

• <span style="color: gold;">Condition (A')</span> : $f'(\bar{x})\neq 0$ (c'est-à-dire que $\bar{x}$ est un zéro _simple_)
</div>
<div class="fragment">
Dans le prochain cours, nous verrons un théorème qui montre que la méthode de Newton fonctionne au mieux lorsque <span style="color: gold;">(A')</span> et <span style="color: gold;">(B)</span> sont toutes deux satisfaites: elles garantissent alors une convergence _quadratique_. 
</div>
</div>

## Implémentation Python

Nous commençons par fixer les paramètres de notre implémentation, 

```{.python code-line-numbers="1-3|5-7|9-10|12-13"}
# Définir la fonction dont on veut trouver le zéro
def f(x):
  return x**2 - 3

# Définir la dérivée de cette fonction
def fprime(x):
  return 2*x

# Définir l'estimation initiale pour le zéro
x0 = 1.5

# Définir la tolérance pour la convergence
tol = 1e-10
```
<br>
<div class="fragment">
<div  class="Theorembox" style="margin-top:-30px">
<b style='font-size: 1.2em;'>Remarque. </b>
<hr style="margin: 0.3em auto;">
Ici, nous avons le luxe d'avoir une expression analytique pour la dérivée de $f$. Si ce n'était pas le cas et une évaluation numérique était nécessaire, la complexité de ce calcul devrait être prise en compte dans l'application de la méthode de Newton. 
</div>
</div>

## Implémentation Python

```{.python code-line-numbers="1-2|4-5|7-9|11|13"}
# Itérer la méthode de Newton jusqu'à ce que notre condition soit remplie
while True:
    
  # Appliquer la fonction d'itération : x1 = g(x0)
  x1 = x0 - f(x0)/fprime(x0); 
  
  # Vérifier si la distance entre les approximations est inférieure au seuil
  if abs(x1 - x0) < tol:
    break;

  x0 = x1;

print("Le zéro de la fonction est approximativement", x0)
```
<pre><code class="fragment">Le zéro de la fonction est approximativement 1.7320508075688772</code></pre> 

<div class="fragment">
<span style="font-size: 30px;"> Ce qui est une approximation parfaitement respectable:  </span>

```{python}
#| echo: true
import math
print(math.sqrt(3))
```
</div>

## Une mise en garde 

```{.python code-line-numbers="1-7"}
def f(x):
    return x**3 - 3*x**2 - 1

def fprime(x):
    return 3*x**2 - 6*x

x0 = 2
tol = 1e-10

while True:
  x1 = x0 - f(x0)/fprime(x0);
  if abs(x1 - x0) < tol:
      break;
  x0 = x1;

print("Le zéro de la fonction est approximativement", x0)
```
<pre><code class="fragment">ZeroDivisionError: division by zero</code></pre> 
<br>
<div class="fragment" style="text-align:center">Il faut néanmoins être prudent dans le choix de $x_0$!</div>



