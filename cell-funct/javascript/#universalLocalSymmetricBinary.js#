let num_states = 2;
let states = Array.from(Array(num_states).keys());

// Function to initialize the grid
function initialize(width, height) {
    let grid = new Array(height);
    for (let i = 0; i < height; i++) {
        grid[i] = new Array(width);
        for (let j = 0; j < width; j++) {
	    if (i==15 && j==15) {
		grid[i][j] = 1
	    }
	    else {
		grid[i][j] = 0
	    }
//	    if (Math.random()<0.7){
//		grid[i][j] = 0
//	    }
//	    else {
//		grid[i][j] = 1
//	    }
//	    grid[i][j] = states[Math.floor(Math.random() * states.length)];  // Assigns a random state
        }
    }
    return grid;
}

// Function to count the alive neighbors of a cell
function countAliveNeighbors(grid, i, j) {
    let count = 0;
    for (let x = Math.max(i-1, 0); x <= Math.min(i+1, grid.length-1); x++) {
        for (let y = Math.max(j-1, 0); y <= Math.min(j+1, grid[0].length-1); y++) {
            count += Math.min(grid[x][y] , 1);
        }
    }
    count -= Math.min(grid[i][j] , 1); // Reduce the count by one if the cell itself is alive
    return count;
}

// Function to get the next state of a cell
function update(grid, i, j) {
    return countAliveNeighbors(grid, i, j);
}

//export {initialize, update, states};

