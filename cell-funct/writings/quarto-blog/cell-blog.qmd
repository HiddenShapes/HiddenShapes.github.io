---
title: A Categorical approach to cellular automata
subtitle: or CA with CT
author: Leonard Hardiman
format:
  html:
    fontsize: 1.3em
    html-math-method:
      method: mathjax
    toc: true
    toc-location: left
    theme:
      light: [cosmo, light.scss] 
      dark: [cyborg, dark.scss]
    css: custom.css
    page-layout: full
include-before-body: header.html
include-after-body: footer.html
include-in-header: latexFunctions.md
---

This is a "living document" to track work on various aspects of cellular automata. 

# Setup

## Cellular automata
Let $S$ be a non-empty finite set of states and let $G$ be an non-empty graph. We also consider a distinguished state $0 \in S$, called the *dead* state. A *Cellular Automaton* (CA) on $G$ is a function,
$$\de \colon S^{V} \rightarrow S^{V},$$
where $V$ denotes the set of vertices in $G$. We call an element of $S^{V}$ a *configuration*, and call this function the *transition function*, it describes the dynamics of the automaton, mapping the current configuration (state of each vertex) to the next configuration. 

Obviously, $\de$ should be constrained by $G$, in some way. But, for now, one of the good/bad things is that everything works for an arbitrary $\de \in \End(S^{V})$. Here is a list of properties that $\delta$ will have that probably should be brought into the story:

* translation invariance (requires elements of $G$ to have a $\bZ^n$-action),
* dead cells do nothing by themselves
* local rules.



## Bringing in category theory

For a given cellular automaton, we consider a cateogry $\bC$ defined as follows. 

* $\Obj(\bC) = S^{V}$
* $\Hom(a,b) = \{n \in \bN \mid \de^n(a)=b \}.$

A nice feature of this construction is that composition is simply given by addition. In particular, the identity map is given by $0 \colon a \to a$, we denote this map  $\id \in \End(a)$. In the subsequent discussion, we confuse any given CA with its associated category.

We note that the $\Hom$-spaces have a fairly particular structure; for $a$ and $b$ be such that $\Hom(a,b) \neq \emptyset$ there exists $k, l \in \bN$ such that
$$
\Hom(a,b) = 
\begin{cases}
\{ k \} & \text{if neither $a$ nor $b$ are recurrent.}\\
\{k + n\cdot l \mid n \in \bN\} &\text{else.}
\end{cases}
$$
Our real object of interest is the 2-category $\Cell$  of such categories (i.e. categories that arise from cellular automata). In particular, we ask the following explorative question: can we construct a non-trivial functor $F \colon \bC_1 \to \bC_2 \ $? An initial challenge in answering this question is finding the right characterisation of "trivial". This is one of the objectives of the next section.

## Zero CA

[...]

# Various Functors

To recall a functor $F\colon \bC_1 \to \bC_2$ would consist of the following data,

* a map on configurations $F \colon \Obj(\bC_1) \to \Obj(\bC_2)$,
* a map on morphisms $F \colon \Hom(a,b) \to \Hom(F(a),F(b))$ such that $F(\alpha + \beta) = F(\alpha) + F(\beta)$. 

From now on, we will always assume that this map is the identity (an assumption which implies that $\Hom(a,b) = \Hom(F(a),F(b)), \ \forall a,b$).^[It would be perfectly possible to forgo this assumption, the cellular interpretation perhaps being some kind of "time dilation" (which could be very not trivial, depending upon the source and target configurations).]

As we have fixed the behaviour of the functor on morphisms, any mapping $F\colon \Obj(\bG) \to \Obj(\bC)$ provides a candidate functor, which gives rise to a genuine functor if the following diagram is satisfied, 

<div style="display: flex; justify-content: center;">
<div style="margin-right: 120px;">
<img class=myImage src="./img/tikz/cd1.svg" style="width: 220%;">
</div>
</div>

Therefore, to represent these functors in a engaging way, we'll present dynamic illustrations of this commutation at work, in the following style.

<div style="display: flex; align-items: center; justify-content: center;">
<div style="text-align: right; margin-right: 30px;">
$F \colon$
</div>
<div class="flex-container" style="display: flex; flex-direction: row; align-items: center;">
<div class="canvasContainer" id="aCanvasContainer">
<div class="canvas-wrapper" id="wrapper4">
<canvas id="aCanvas4" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper1">
<canvas id="aCanvas1" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper5">
<canvas id="aCanvas5" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper3">
<div class="overlay-container">
<canvas class="canvas-overlay" id="aCanvas3" width="200" height="200"></canvas>
<canvas class="canvas-overlay" id="aCanvas2" width="200" height="200"></canvas>
</div>
</div>
</div>
</div>
</div>

<div class="buttonContainer" style="padding-left: 50px;">
<button class="playButton" id="aPlayButton">Play/Pause</button>
</div>

Here the blue arrows represent an increment in time (i.e.\ a morphism in $\bC$) and the red arrows represent the functor in question. You can click on the diagram to increment all the CAs by one (you could think of each of the pictures being moved to the left), or you can simply press the play/pause button to toggle the passage of time on and off. Also the bottom right CA is in fact an overlay of two separate semi-transparent CAs, the first being calculated by incrementing the bottom left CA, and the second by applying the functor to the top right CA. Therefore, the fact that this overlay appears as a single unified CA testifies to the fact that the red arrow represent a functor.

Of course, this presentation is hard to parse without knowing the functor depicted. In this case, the functor serves principally to illustrate that relatively simple functors don't necessarily appear so. We recommend finishing this section before attempting the following exercise. 

**Exercise.** Determine the functor $F$ depicted in the diagram above.

## Local functors

Let $\bC_1$ and $\bC_2$ be two CAs on the same graph with states $S_1$ and $S_2$ respectively. A functor $F \colon \bC_1 \to \bC_2$ is called *local* if there exists a map $f \colon S_1 \to S_2$ that induces $F$. $\com{This could be a bad name.}$

## Formal trivial functors

Before proceeding, we note the existence of two "formal" examples of trivial functors: 
$$
\textbf{0} \colon \bC \to \bot \quad \text{and} \quad \Id \colon \bC \to \bC,
$$
which we have depicted below.

<div class="flex-container" style="display: flex; align-items: center;">
$\textbf{0} \colon$
<div class="canvasContainer" id="bCanvasContainer">
<div class="canvas-wrapper" id="wrapper4">
<canvas id="bCanvas4" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper1">
<canvas id="bCanvas1" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper5">
<canvas id="bCanvas5" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper3">
<div class="overlay-container">
<canvas class="canvas-overlay" id="bCanvas3" width="200" height="200"></canvas>
<canvas class="canvas-overlay" id="bCanvas2" width="200" height="200"></canvas>
</div>
</div>
</div>
$\Id \colon$
<div class="canvasContainer" id="cCanvasContainer">
<div class="canvas-wrapper" id="wrapper4">
<canvas id="cCanvas4" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper1">
<canvas id="cCanvas1" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper5">
<canvas id="cCanvas5" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper3">
<div class="overlay-container">
<canvas class="canvas-overlay" id="cCanvas3" width="200" height="200"></canvas>
<canvas class="canvas-overlay" id="cCanvas2" width="200" height="200"></canvas>
</div>
</div>
</div>
</div>
<div class="buttonContainer" style="padding-left: 20px;">
<button class="playButton" id="bPlayButton">Play/Pause</button>
</div>

## Isomorphisms

## Projection / Deformation retracts

* Superfluous states of life ... ok
* Superfluous states of death ... less ok

## Equivalences

# Endomorphisms of $\Cell$

## Zoom out

## ?

# Life preserving

## Initial definitions

Let $\bC$ be a CA together with a configuration $a \in \Obj(\bC) = S^V$. The *shadow of $a$* is defined as follows,
$$
\begin{aligned}\sh(a) \colon V &\to \{0,1\} \\ v &\mapsto \begin{cases}0 & \text{if $a(v) =0,$} \\ 1 & \text{else.}\end{cases} \end{aligned}
$$
The *$\bC$-support* of $a$ is then given by the function
$$
\begin{aligned}\supp{\bC}{a} : \bN &\to \{0,1\}^V \\ i &\mapsto \sh(\de^{i}(a)),\end{aligned}
$$
where $\de$ is the transition function of $\bC$.


$\com{[todo: example]}$

Let $\bC_1$ and $\bC_2$ be two CAs whose underlying graphs share the same set of vertices $V$. A map (or functor) $F \colon \Obj(\bC_1) \to \Obj(\bC_2)$ is called *life preserving* if it satisfies $\supp{\bC_2}{F(a)} = \supp{\bC_1}{a}$, $\forall a \in \Obj(\bC_1)$.

We note that there exist life preserving maps that are not functors. To construct an example, we consider the following new concept. 

## Superfluous states

Let $\bC$ be a CA with states $S$ and let $\bar{S}$ be a subset of $S$.

We call $\bar{S}$ *superfluous* if there exists a local life-preserving functor $F\colon \bC \to \bar{\bC}$, where $\bar{\bC}$ is a CA with states $S \setminus \bar{S}$. An example is provided by the following set up:

<div class="canvasContainer" id="supCanvasContainer">
<div class="canvas-wrapper" id="wrapper4">
<canvas id="supCanvas4" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper1">
<canvas id="supCanvas1" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper5">
<canvas id="supCanvas5" width="200" height="200"></canvas>
</div>
<div class="canvas-wrapper" id="wrapper3">
<div class="overlay-container">
<canvas id="supCanvas3" width="200" height="200"></canvas>
<canvas id="supCanvas2" width="200" height="200"></canvas>
</div>
</div>
</div>
<div class="buttonContainer">
<button class="playButton" id="supPlayButton">Play/Pause</button>
</div>

The top game is a simple 'colouring' of 

## Life equivalence



# Questions

* What is the smaller number of states needed for a CA to have a given support?

* Is there a notion of the simplest/smallest CA that has a given support?

* If $\bC_{1}$ and $\bC_{2}$ share a support, is there a functor between them? Or a span $\bC_{1} \to \bC_{3} \leftarrow \bC_{2}$? 

# Other ideas

* optimal CA universal prop?
* inverse of a zoom out?
* Could convolution give a functor for some CA?



