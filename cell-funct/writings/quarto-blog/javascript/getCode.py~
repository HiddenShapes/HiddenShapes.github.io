def generate_code(character, width, height, path1, path2, path3, size1, size2):
    # Format the script with provided arguments
    script = f"""
import {{initApp}} from './initApp.js';

import {{initialize as {character}Initialize, update as {character}Update1, states as {character}States1}} from '{path1}';
import {{update as {character}Update2, states as {character}States2}} from '{path2}';
import {{cellFunctor as {character}CellFunctor}} from '{path3}';

let width = {width};
let height = {height};

let {character}Grid1 = {{data: {character}Initialize(width, height)}};
let {character}Grid2 = {{data: {character}CellFunctor({character}Grid1.data)}};
let {character}Grid3 = {{data: {character}CellFunctor({character}Grid1.data)}};
let {character}Grid4 = {{data: JSON.parse(JSON.stringify({character}Grid1.data))}};
let {character}Grid5 = {{data: JSON.parse(JSON.stringify({character}Grid1.data))}};

let {character}Grids = [{character}Grid1, {character}Grid2, {character}Grid3, {character}Grid4, {character}Grid5];
let {character}CanvasIds = ["{character}Canvas1", "{character}Canvas2", "{character}Canvas3", "{character}Canvas4", "{character}Canvas5"];
let {character}UpdateFunctions = [{character}Update1, {character}Update2, () => {character}CellFunctor({character}Grid1.data), {character}Update1, {character}Update2];
let {character}CellSizes = [{size1},{size2}]; // Size of a cell in pixels

window.onload = function() {{
    initApp({character}CanvasIds, {character}Grids, {character}UpdateFunctions, {character}CellSizes);
}}
"""

    # Print the script
    print(script)

# Call the function
generate_code('a', 40, 40, './GoLM.js', './zoomGoL.js', './cellFun-GoLM-zoomGoL.js', 5, 10)
