import { colors } from './colors.js';

export function drawAndEvolve(isPlaying, notInitialized, grids, canvasContexts, updateFunctions, cellSizes, timeoutId, colors) {
    clearTimeout(timeoutId);
    for (let i = 0; i < grids.length; i++) {
        let grid = grids[i];
        let ctx = canvasContexts[i];
        let canvas = ctx.canvas;
        let updateFunction = updateFunctions[i];
	let currentCellSize = i === 0 || i === 3 ? cellSizes[0] : cellSizes[1]; 
	
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (let i = 0; i < grid.data.length; i++) {
            for (let j = 0; j < grid.data[0].length; j++) {
                ctx.fillStyle = colors[grid.data[i][j]];
                ctx.fillRect(j * currentCellSize, i * currentCellSize, currentCellSize, currentCellSize);
            }
        }

        if (isPlaying || notInitialized) {
            if (i !== 2) {
                let newGrid = new Array(grid.data.length);
                for (let i = 0; i < grid.data.length; i++) {
                    newGrid[i] = new Array(grid.data[0].length);
                    for (let j = 0; j < grid.data[0].length; j++) {
                        newGrid[i][j] = updateFunction(grid.data, i, j);
                    }
                }
                grid.data = newGrid;
            } else {
                grid.data = updateFunction(); 
            }
            notInitialized = Math.max(0, notInitialized - 1);
        }
    }
    
    let updateSpeed = isPlaying ? 300 : 0;
    timeoutId = setTimeout(drawAndEvolve, updateSpeed);
}

export function initOnLoad(grids, canvasContexts, updateFunctions, drawAndEvolveFunction) {
    const canvases = ["canvas1", "canvas2", "canvas3", "canvas4", "canvas5"].map(id => document.getElementById(id));
    const contexts = canvases.map(canvas => canvas.getContext("2d"));
    const playButton = document.getElementById("playButton");
    let isPlaying = false;

    playButton.onclick = function() {
        isPlaying = !isPlaying;
    }

    let canvasContainer = document.getElementById("canvasContainer");
    canvasContainer.onclick = function() {
        if (!isPlaying) {
            let notInitialized = 5;
            drawAndEvolveFunction(isPlaying, notInitialized, grids, contexts, updateFunctions);
        }
    };

    drawAndEvolveFunction(isPlaying, 3, grids, contexts, updateFunctions);
}
